var searchIndex = JSON.parse('{\
"rust_examples":{"doc":"","t":[0,14,0,0,14,0,0,0,14,0,0,11,0,0,0,14,0,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,12,3,8,3,8,3,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,8,3,13,4,11,11,11,11,11,11,11,11,11,10,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,8,10,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,0,0,11,11,11,4,13,13,11,11,11,11,11,11,11,11,11,11,11,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,11,8,3,16,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,5,11,11,11,11,11,11,11,11,11,3,3,3,3,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["adts","approx","brands","collect","count","dependent","dispatch","errors","impl_max_value","macros","memory","normalize","orphan","rc","rsqrt","substitute","typing","Leaf","Node","SelfReferentialStructureTest","Tree","borrow","borrow","borrow_mut","borrow_mut","fmt","from","from","into","into","search","try_from","try_from","try_into","try_into","type_id","type_id","0","1","data","key","left","right","BrandedIndex","BrandedVec","InvariantLifetime","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","from","from","from","get","get_index","get_mut","into","into","into","make","push","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","collect_initials","read_files","0","1","HCons","HList","HNil","Nat","NotPredTest","Pred","Succ","Vector","Zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","cons","cons","from","from","from","from","from","from","head","into","into","into","into","into","into","len","len","lower","lower","lower","new","size","tail","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","CannotMonomorphizeDifferentiableInVecTest","Cosine","Differentiable","Quadratic","Sine","Trigonometric","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","grad","grad","grad","gradient_descent_dynamic","gradient_descent_static","heap_alloc","into","into","into","stack_alloc","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","explained_div","maybe_div","naive_div","MaxValue","max_value","AliasingXorMutabilityTest","DoubleFeeTest","ExclusiveOwnershipTest","Palette","Point2D","RGBColor","UseAfterFreeTest","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_point_immutably","borrow_point_mutably","borrow_twice","clone","clone_into","colors","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","show_color","show_palette","take_ownership","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","x","y","OrphanInstanceTest","borrow","borrow_mut","from","into","model","module_a","try_from","try_into","type_id","Entity","X","Y","borrow","borrow_mut","cmp","eq","fmt","from","into","partial_cmp","try_from","try_into","type_id","prioritize","Container","Data","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","heap_owned","heap_shared","into","into","owned","stack_shared","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","FastNormalize","Float","NormVec","PositiveFloat","Vec3D","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fast_rsqrt","fmt","from","from","from_square","inner","into","into","mul","ne","new","new","normalize","rsqrt","rsqrt","square","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","BottomTypeExample","Positive","TopTypeExample","UnitTypeExample","as_u32","better_cmp_f64","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp_f64","eq","fmt","from","from","from","from","into","into","into","into","ne","new","partial_cmp","safe_cmp_f64","to_owned","top_type","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit_type"],"q":["rust_examples","","","","","","","","","","","","","","","","","rust_examples::adts","","","","","","","","","","","","","","","","","","","","rust_examples::adts::Tree","","","","","","rust_examples::brands","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_examples::collect","","rust_examples::dependent","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_examples::dispatch","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_examples::errors","","","rust_examples::macros","","rust_examples::memory","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_examples::orphan","","","","","","","","","","rust_examples::orphan::model","","","","","","","","","","","","","","rust_examples::orphan::module_a","rust_examples::rc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_examples::rsqrt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_examples::typing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This module contains an example of Algebraic Data Type …","Macro that defines “approximately equal” for …","This module demonstrates <em>branded types</em> on an example of a …","This module includes Rust’s implementation of <em>traversable</em>…","Macro that counts any input tokens at compilation time …","This module includes Rust’s approach to <em>dependent types</em>.","This example demonstrates differences between a <em>static </em>…","This module presents several possibilities of how to …","Macro that automates implementation of MaxValue for …","This module contains examples of <em>declarative macros</em>.","Examples in this module present how the concepts of …","","This module demonstrates <em>Orphan rules</em> and <em>coherence</em> of Rust…","This module presents various kinds of pointers and their …","Example of Fast inverse square root.","Simple macro for replacing any token <code>$_t</code> with expression …","This module shows some examples of how Rust’s type …","","","This test demonstrates that in Rust all <em>self-referential</em> …","An enum representing an Binary Tree Algebraic Data Type …","","","","","","","","","","Lookup method that returns either:","","","","","","","","","","","","","Thin wrapper for usize which is bound to particular …","Thin wrapper for Vec which can only be accessed via an …","Lifetime wrapper which makes <code>&#39;id</code> <em>invariant</em> and has no size.","","","","","","","","","","","","","","","Get shared reference to the interior value at given …","Method which associates (brands) given <code>idx</code> with this …","Get mutable reference to the interior value at given …","","","","Construct new BrandedVec from given Vec and run a closure <code>f</code>…","Appends given <code>value</code> to this BrandedVec and returns …","","","","","","","","","","","","Traverse a collection of input values and apply an effect …","Traversing a Result works analogously to an Option since a …","Head of this HList.","Tail of this HList which itself is a HList of length …","Structure representing a non-empty HList consisting of a …","Trait representing a heterogeneous list, a.k.a HList of …","Structure representing the null pointer at the end of each …","Trait representing a type-level definition of natural …","Negative compilation tests for Pred relation.","Trait encoding a predecessor relation: “<code>Self</code> is a …","Type-level definition of a successor of a natural number <code>N</code>…","A wrapper for <code>Vec&lt;A&gt;</code> which preserves the information about …","Type-level definition of the natural number 0.","","","","","","","","","","","","","","Add given element to the front of this Vector.","Add given element to the front of this HList.","","","","","","","","","","","","","","Analogy to the <code>Vec::len</code> which takes advantage from …","Analogy to <code>Vec::len</code>.","Lowers a natural number from a type level value (type) to …","","","Create new Zero-sized vector.","Static information about the size of a Vector.","","","","","","","","","","","","","","","","","","","","This test shows that if one wants to construct a container …","","Interface of a real 1D differentiable function","","","","","","","","","","","","","Compute the first derivative of this function at given …","","","Gradient Descent that finds a minimum of a dynamically …","Gradient Descent that finds a minimum of a statically …","","","","","","","","","","","","","","","This version of division is somewhat artificial but …","This version of division models the error case (<code>d = 0</code>) by …","This function computes <code>num / d</code> in a <em>naive</em> way that causes …","Type class that defines instances having a known maximum …","Accessor to the maximum value","This test demonstrates the <strong>Aliasing XOR Mutability</strong> …","This test shows that in <em>safe</em> Rust one cannot compile a …","This test demonstrates that in Rust each allocated memory …","","","","This test shows that in <em>safe</em> Rust one cannot compile a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This test demonstrates that Rust disallows <em>Orphan Instances</em>…","","","","","Module that defines single data type called <code>Entity</code>","Module which exposes an operation which depends on an …","","","","Union type which defines two variants <code>X</code> and <code>Y</code>","","","","","","","","","","","","","","Sorts given entities using Ord implementation for Entity …","Container for Data allocated and owned in various ways.","Thin wrapper around usize serving as an internal counter …","","","","","","","","","","","","","","Pointer to owned data located on the <em>heap</em>","Reference counting pointer to shared data located on the …","","","Owned data located on the <em>stack</em>","Immutably shared data located on the <em>stack</em> that must …","","","","","","","","","This trait is a typeclass for all vectors that are …","Type that represents <em>normal</em> f32 numbers. This excludes …","Normalization return type","Thin wrapper around f32 with additional semantics that the …","Type alias for 3D vector represented as 3-tuple of f32","","","","","","","","","Approximates the inverse square root of given number.","","","","","Retrieves inner f32 value","","","","","Constructs Float only if <code>v</code> is <em>normal</em>","Constructs new PositiveFloat from given f32 only if:","Normalize this vector and return <code>NormVec</code>","Approximates the inverse square root of given number.","Calculates the inverse square root of given number","Computes the square of the inner value of <code>self</code> and returns …","","","","","","","","This example presents several constructs which represent …","Opaque wrapper around f64 which adds static semantics that …","Structure that defines single field which has the type of …","Structure that defines single field which has the type of …","Interprets Positive as an u32","Improved comparison function for <em>positive</em> f64s.","","","","","","","","","","","Naive <em>positive</em> f64 comparison function.","","","","","","","","","","","","This forces clients to always check if it’s ok. One …","","Safe and efficient version of comparison of two Positive …","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,2,0,0,3,2,3,2,2,3,2,3,2,2,3,2,3,2,3,2,4,4,5,5,5,5,0,0,0,6,7,8,6,7,8,7,8,7,8,7,6,7,8,6,6,6,6,7,8,6,6,7,8,6,7,8,6,7,8,6,7,8,0,0,9,9,0,0,0,0,0,0,0,0,0,10,11,12,13,9,14,10,11,12,13,9,14,14,12,15,10,11,12,13,9,14,9,10,11,12,13,9,14,12,15,16,10,11,12,12,9,10,11,12,13,9,14,10,11,12,13,9,14,10,11,12,13,9,14,0,17,0,0,17,0,18,17,19,18,17,19,18,17,19,20,18,17,0,0,18,18,17,19,18,18,17,19,18,17,19,18,17,19,0,0,0,0,21,0,0,0,0,0,0,0,22,23,24,25,26,27,28,22,23,24,25,26,27,28,0,0,0,27,27,28,26,27,28,22,23,24,25,26,27,28,22,23,24,25,26,27,28,0,0,0,27,22,23,24,25,26,27,28,22,23,24,25,26,27,28,22,23,24,25,26,27,28,26,26,0,29,29,29,29,0,0,29,29,29,0,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,31,32,31,32,31,32,31,32,31,31,32,31,32,32,32,31,32,32,32,31,32,31,32,31,32,31,32,0,0,33,0,0,34,35,34,35,34,34,34,34,34,34,35,34,34,34,35,34,34,34,35,34,33,0,34,35,34,35,34,35,34,35,34,0,0,0,0,36,0,37,38,39,36,37,38,39,36,36,36,0,36,36,37,38,39,36,37,38,39,36,36,36,36,0,36,37,37,38,39,36,37,38,39,36,37,38,39,36,39],"f":[null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["invariantlifetime",3]],[[],["brandedindex",3]],[[]],[[]],[[],["invariantlifetime",3]],[[]],[[]],[[]],[[["brandedindex",3]]],[[["usize",15]],["option",4,[["brandedindex",3]]]],[[["brandedindex",3]]],[[]],[[]],[[]],[[["vec",3]]],[[],["brandedindex",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["vec",3,[["str",15]]]],["option",4,[["vec",3,[["char",15]]]]]],[[],["result",6,[["vec",3,[["string",3]]]]]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vector",3,[["succ",3]]]],[[],["hcons",3,[["succ",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["differentiable",8],["usize",15],["f64",15]],["f64",15]],[[["usize",15],["f64",15]],["f64",15]],[[["f64",15],["f64",15],["f64",15]],["box",3]],[[]],[[]],[[]],[[["f64",15],["f64",15],["f64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["i32",15],["str",15]],["result",4,[["i32",15],["string",3]]]],[[["i32",15],["i32",15]],["option",4,[["i32",15]]]],[[["i32",15],["i32",15]],["i32",15]],null,[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["point2d",3]]],[[["point2d",3]]],[[["point2d",3],["point2d",3]]],[[],["rgbcolor",3]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rgbcolor",3]]],[[["palette",3]]],[[["point2d",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[],["ordering",4]],[[["entity",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["option",4,[["ordering",4]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["container",3]],[[]],[[]],[[],["data",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],null,null,[[]],[[]],null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[["positivefloat",3]],["positivefloat",3]],[[]],[[]],[[]],[[]],[[],["positivefloat",3]],[[]],[[["positivefloat",3]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["f32",15]]],[[],["f32",15]],[[]],[[]],[[["positivefloat",3]],["positivefloat",3]],[[["positivefloat",3]],["bool",15]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[]],[[["f32",15]],["f32",15]],[[]],[[],["positivefloat",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[],["u32",15]],[[["f64",15],["f64",15]],["option",4,[["ordering",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["positive",3]],[[]],[[["f64",15],["f64",15]],["ordering",4]],[[["positive",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["positive",3]],["bool",15]],[[["f64",15]],["option",4]],[[["positive",3]],["option",4,[["ordering",4]]]],[[["positive",3],["positive",3]],["ordering",4]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[6,"Vec3D"],[4,"Tree"],[3,"SelfReferentialStructureTest"],[13,"Leaf"],[13,"Node"],[3,"BrandedVec"],[3,"InvariantLifetime"],[3,"BrandedIndex"],[3,"HCons"],[3,"Zero"],[3,"Succ"],[3,"Vector"],[3,"HNil"],[3,"NotPredTest"],[8,"HList"],[8,"Nat"],[4,"Trigonometric"],[3,"Quadratic"],[3,"CannotMonomorphizeDifferentiableInVecTest"],[8,"Differentiable"],[8,"MaxValue"],[3,"DoubleFeeTest"],[3,"UseAfterFreeTest"],[3,"AliasingXorMutabilityTest"],[3,"ExclusiveOwnershipTest"],[3,"Point2D"],[3,"RGBColor"],[3,"Palette"],[3,"OrphanInstanceTest"],[4,"Entity"],[3,"Data"],[3,"Container"],[8,"FastNormalize"],[3,"PositiveFloat"],[3,"Float"],[3,"Positive"],[3,"TopTypeExample"],[3,"BottomTypeExample"],[3,"UnitTypeExample"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};