initSidebarItems({"fn":[["borrow_point_immutably",""],["borrow_point_mutably",""],["borrow_twice",""],["show_color",""],["show_palette",""],["take_ownership",""]],"struct":[["AliasingXorMutabilityTest","This test demonstrates the Aliasing XOR Mutability principle enforced by Rust. This concept states that at any time there can be either"],["DoubleFeeTest","This test shows that in safe Rust one cannot compile a code that would result in double free."],["ExclusiveOwnershipTest","This test demonstrates that in Rust each allocated memory has exactly one owner. Conversely, there cannot be two owners of the same value and ownership can only be moved around."],["Palette",""],["Point2D",""],["RGBColor",""],["UseAfterFreeTest","This test shows that in safe Rust one cannot compile a code that would result in use after free."]]});